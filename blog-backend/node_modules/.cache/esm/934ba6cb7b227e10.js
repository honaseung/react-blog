let mongoose,Schema,bcrypt;_7b2‍.x([["default",()=>_7b2‍.o]]);_7b2‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_7b2‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);


const UserSchema = new Schema({
  username: String,
  hashedPassword: String,
});

//인스턴스 메서드 만드는법
UserSchema.methods.setPassword = async function (password) {
  const hash = await bcrypt.hash(password, 10);
  //화살표 함수로 만들시에는 this 가 인스턴스 자신을 가르키지 못한다.
  this.hashedPassword = hash;
};

/**
 *
 * @param {String} password
 * @returns {Promise}
 */
UserSchema.methods.checkPassword = async function (password) {
  const result = await bcrypt.compare(password, this.hashedPassword);
  return result;
};

UserSchema.methods.serialize = function () {
  const data = this.toJSON();
  delete data.hashedPassword;
  return data;
};

//스태틱 메서드
UserSchema.statics.findByUsername = function (username) {
  //하나의 다큐먼트만을 가져온다.
  return this.findOne({ username });
};

const User = mongoose.model('User', UserSchema);

_7b2‍.d(User);
