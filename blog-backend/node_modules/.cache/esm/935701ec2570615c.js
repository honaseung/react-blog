let Joi,User;_257‍.x([["register",()=>register],["login",()=>login],["check",()=>check],["logout",()=>logout]]);_257‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_257‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);


       const register = async (ctx) => {
  //회원가입
  const schema = Joi.object().keys({
    username: Joi.string().alphanum().min(3).max(20).required(),
    password: Joi.string().required(),
  });
  const result = schema.validate(ctx.request.body);
  if (result.error) {
    ctx.status = 400;
    ctx.body = result.error;
    return;
  }

  const { username, password } = ctx.request.body;
  try {
    const exist = await User.findByUsername(username);
    if (exist) {
      ctx.status = 409;
      ctx.body = '중복된 이름입니다.';
      return;
    }
    const user = new User({
      username,
    });
    await user.setPassword(password);
    await user.save();

    ctx.body = user.serialize();
  } catch (error) {
    ctx.throw(500, error);
  }
};
       const login = async (ctx) => {
  //로그인
  const { username, password } = ctx.request.body;
  if (!username || !password) {
    ctx.status = 401;
    ctx.body = '접근할 수 없습니다.';
    return;
  }
  try {
    const exist = await User.findByUsername(username);
    if (!exist) {
      ctx.status = 400;
      ctx.body = '존재하지 않는 회원입니다.';
      return;
    }
    const checkPassword = exist.checkPassword(password);
    if (checkPassword) {
      ctx.body = '로그인되었습니다.';
    } else {
      ctx.status = 400;
      ctx.body = '잘못된 비밀번호입니다.';
    }
  } catch (error) {
    ctx.throw(500, error);
  }
};
       const check = async (ctx) => {
  //로그인 상태 확인
};
       const logout = async (ctx) => {
  //로그아웃
};
