let Koa,Router,postApi,bodyParser,mongoose;_1c3‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_1c3‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_1c3‍.w("./api/posts",[["default",["postApi"],function(v){postApi=v}]]);_1c3‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_1c3‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);require('dotenv').config();


// const api = require('./api');




const { PORT, MONGO_URI } = process.env;

mongoose
  .connect(MONGO_URI)
  .then(() => console.log('Connect to MongoDB'))
  .catch((e) => _1c3‍.g.console.log('Fail to connect', e));

//서버 생성
const app = new Koa();
const router = new Router();

//라우터 등록 전에해줘야한다.
app.use(bodyParser());

// //api 라는 폴더의 index.js 에서 가져온 라우터 등록
// //해당하는 모든 라우터들은 경로가 반드시 /api 부터 시작해야한다.
// router.use('/api', api.routes());
router.use('/posts', postApi.routes());

// //라우터 설정
// //첫번째 파라미터는 경로, 두번째 파라미터는 미들웨어에서 사용할 함수
// router.get('/', (ctx) => {
//   ctx.body = '홈';
// });

// //경로에 파라미터를 주입함, 파라미터 뒤에 ? 를 붙일시에 파라미터가 필수값이 아니게됨.
// router.get('/about/:name?', (ctx) => {
//   //파람으로 가져오려면 /about/test 형태를 띄어야함.
//   const { name } = ctx.params;
//   ctx.body = name ? `${name} 의 소개` : '소개';
// });

// router.get('/posts', (ctx) => {
//   //쿼리로 가져오려면 /posts?id=1 처럼 쿼리스트링이 되면 됨.
//   //쿼리로 가져오면 자동으로 객체로 만들어줌, 그게 싫다면 queryString 을 사용할 것.
//   const { id } = ctx.query;
//   ctx.body = id ? `포스트 #${id}` : '포소트 아이디가 없습니다.';
// });

// //미들웨어
// //ctx = Context 의 줄임말로써 웹 요청과 응답에 관한 정보를 가지고있음.
// app.use(async (ctx, next) => {
//   ctx.body = "I'm here";
//   await next();
// });

//서버 (next 가 없으니까)
app.use(router.routes()).use(router.allowedMethods());

//서버 포트 4000 번으로 띄우기
//PORT 로 지정해주는데 PORT 값이 유효하지 않으면 4000 으로 지정
const port = PORT || 4000;
app.listen(port, () => {
  console.log(`listen ${port}`);
});
